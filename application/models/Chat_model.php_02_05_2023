<?php if(!defined('BASEPATH')) exit('No direct script access allowed');

class Chat_model extends CI_Model{ 
    public function GetDriverMessages($lorryId,$lastMessageId = ''){
        
		$this->db->select(' tbl_drivers_login.DriverName');  	 		 
		$this->db->select('tbl_driver_messages_status.status');  	
		$this->db->select('tbl_driver_messages_new.*');
		$this->db->select('DATE_FORMAT(tbl_driver_messages_new.created_at,"%d-%m-%Y %T") as CreateDateTime');  	 	 
		$this->db->select('DATE_FORMAT(tbl_driver_messages_new.updated_at,"%d-%m-%Y  %T") as UpdateDateTime');  	 	   
		$this->db->join('tbl_drivers_login', 'tbl_drivers_login.DriverID = tbl_driver_messages_new.driver_id ',"LEFT"); 	
		$this->db->join('tbl_driver_messages_status', 'tbl_driver_messages_status.message_id = tbl_driver_messages_new.id ',"LEFT"); 
		$this->db->where('tbl_driver_messages_new.message <> "" ');  
		$this->db->where('tbl_driver_messages_new.lorry_no = "'.$lorryId.'" ');  
		if(isset($lastMessageId) && !empty($lastMessageId)){
		    $this->db->where('tbl_driver_messages_new.id > '.$lastMessageId);  
		}
		$this->db->order_by('tbl_driver_messages_new.id', 'asc');	
		$this->db->group_by('tbl_driver_messages_new.id');	
        $query = $this->db->get('tbl_driver_messages_new');
        //Reset Key Array
        $data = array();
		$data = $query->result_array();
		$totalData  = $this->db->count_all_results();
		$totalFiltered =  $totalData; 
        //Prepare Return Data
        $return = $data; 
        return $return; 
    }
    
    public function GetDriverList(){
        $this->db->select('tbl_drivers_logs.DriverID');
        $this->db->select('tbl_drivers_logs.DriverLoginID');
        $this->db->select('tbl_drivers_login.DriverName');
    	$this->db->from('tbl_drivers_logs');
        $this->db->join('tbl_drivers_login', 'tbl_drivers_login.DriverID = tbl_drivers_logs.DriverLoginID ',"RIGHT"); 
        $this->db->where('LogoutDateTIme = "0000-00-00 00:00:00" ');  
        $this->db->where('LoginDatetime LIKE "%'.date("Y-m-d").'%" ');  
        $this->db->order_by('LogID DESC');  
        $this->db->group_by('DriverID');  

        $query = $this->db->get();
        $data = $query->result_array();
        $activeLorry = array();
        foreach($data as $datas){
            $activeLorry[$datas['DriverID']]['driver_id'] = $datas['DriverLoginID'];
            $activeLorry[$datas['DriverID']]['driver_name'] = $datas['DriverName'];
        }

        $this->db->select('tbl_drivers.LorryNo');
        $this->db->select('tbl_drivers.RegNumber');
    	$this->db->from('tbl_drivers');
        $this->db->where("is_lorry_assigned","1");
        $this->db->where("AppUser","0");
        $query = $this->db->get();
        $data = $query->result_array();
        foreach($data as $key=>$dataInner){
            if(in_array($dataInner['LorryNo'],array_keys($activeLorry))){
                $data[$key]['driver_name'] = $activeLorry[$dataInner['LorryNo']]['driver_name'];
                $data[$key]['driver_id'] = $activeLorry[$dataInner['LorryNo']]['driver_id'];
            }else{
                $data[$key]['driver_name'] = '';
                $data[$key]['driver_id'] = '';
            }
        }

        return $data; 
            
    }
    
	public function GetAllActiveDriverMessage(){ 
	
		$columnIndex = $_POST['order'][0]['column']; // Column index
		$columnName = $_POST['columns'][$columnIndex]['data']; // Column name   
		$columnSortOrder = $_POST['order'][0]['dir']; // asc or desc
		$searchValue = trim(strtolower($_POST['search']['value'])); // Search value  
 
        //Only select column that want to show in datatable or you can filte it mnually when send it
        
        
        
        
        
        
		$this->db->select(' tbl_drivers_login.DriverName');
        $this->db->select(' tbl_drivers.LorryNo');
        //$this->db->select(' tbl_drivers_login.DriverName');  	 		 
        $this->db->select('tbl_driver_messages_status.status');  	
        $this->db->select('tbl_driver_messages_new.driver_id');

        $this->db->select('tbl_driver_messages_new.message');  	 
        $this->db->select('tbl_driver_messages_new.admin_user');  
        $this->db->select('DATE_FORMAT(tbl_driver_messages_new.created_at,"%d-%m-%Y %T") as CreateDateTime');  	 	 
        $this->db->select('DATE_FORMAT(tbl_driver_messages_new.updated_at,"%d-%m-%Y  %T") as UpdateDateTime');  	 	   
        //$this->db->join('tbl_drivers', 'tbl_drivers.LorryNo = tbl_driver_messages_new.DriverID',"LEFT"); 		
        $this->db->join('tbl_drivers_login', 'tbl_drivers_login.DriverID = tbl_driver_messages_new.driver_id ',"LEFT"); 	
        $this->db->join('tbl_driver_messages_status', 'tbl_driver_messages_status.message_id = tbl_driver_messages_new.id ',"LEFT"); 
        $this->db->join('tbl_drivers', 'tbl_drivers.LastDriverID = tbl_drivers_login.DriverID ',"LEFT"); 
        $this->db->where('tbl_driver_messages_new.message <> "" ');
		if( !empty($searchValue) ){   
			$s = explode(' ',$searchValue);
			if(count($s)>0){ 
				for($i=0;$i<count($s);$i++){   
					$this->db->group_start(); 
						$this->db->or_like('tbl_driver_messages_new.message', $s[$i]); 
						$this->db->or_like('tbl_drivers_login.DriverName', $s[$i]);  
						$this->db->or_like(' DATE_FORMAT(tbl_driver_messages_new.created_at,"%d-%m-%Y %T")', $s[$i]); 
					$this->db->group_end(); 
				}
			}    
        }
		$this->db->group_by("tbl_driver_messages_new.driver_id");              
		$this->db->order_by($columnName, $columnSortOrder);			 
        $query = $this->db->get('tbl_driver_messages_new');

        //Reset Key Array
        $data = array();
		$data = $query->result_array();
		$totalData  = $this->db->count_all_results();
		$totalFiltered =  $totalData; 
		
        //Prepare Return Data
        $return = array(
                "draw"            => $_REQUEST['draw'] ,   // for every request/draw by clientside , they send a number as a parameter, when they recieve a response/data they first check the draw number, so we are sending same number in draw. 
                "recordsTotal"    => $totalData,  // total number of records
                "recordsFiltered" => $totalFiltered, // total number of records after searching, if there is no searching then totalFiltered = totalData
                "data"            => $data   // total data array 
        ); 
        return $return; 
    }
	
}

  